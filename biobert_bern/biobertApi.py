# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_biobertApi.ipynb.

# %% auto 0
__all__ = ['create_text_block', 'get_comment_spans_textblock', 'query_plain']

# %% ../nbs/00_biobertApi.ipynb 2
import requests
import re
import pandas as pd
from nbdev.showdoc import *

# %% ../nbs/00_biobertApi.ipynb 7
def create_text_block(df, #pandas DataFrame containg a column, titled "comments," of text elements.  In this case these are Youtube comments.
                     ):
    '''This function takes a pandas DataFrame with a column titled "comments" that is filled with text strings, ie. from comments.  It adds an index number to each text string and adds '::' at the end for later parsing.  Finally, it returns all text elements combined into a single text block'''
    df.reset_index(inplace=True)
    df.rename(columns = {"index":"idx"},inplace=True)
    df.idx = df.idx.astype(str)
    df['comidx'] = df.idx +':: '+df.comments+' ::'
    df.comidx = df.comidx.str.lower().str.replace(r'\(|\)',',',regex=True)
    text_block = ' '.join(df.comidx.tolist())

    return text_block

# %% ../nbs/00_biobertApi.ipynb 12
# get "comment" spans
def get_comment_spans_textblock(text_block:str # single block of text in this structure: `'07 textt ext text. ::'`
                               ):
    '''This function returns a dataframe full of the start, end and span of each text comment/doc in the text_block'''    
    string = text_block
    pattern = r'(\d+:.*?)::'
    dfi = pd.DataFrame()
    for o in re.findall(pattern,string):
            stridx = re.findall(r'(\d+)?::',o) #find the index of the comment from inside the textblock
            stridx = stridx[0]
            pattern2 = fr'({stridx}::.*?)::'  #use this pattern to find the specific text of 'o'
            match=(re.search(pattern2, string))
            #Getting the start and end index in tuple format using match.span()
            text = o
            start = match.start()
            end = match.end()
            span = match.span()
            dfi = dfi.append({'text':text,'start':start,'end':end,'span':span},ignore_index=True)
    return dfi

# %% ../nbs/00_biobertApi.ipynb 18
def query_plain(text:str, #single block of bioMedical text
                url="http://bern2.korea.ac.kr/plain"): # the api address
    '''This function sends your `text_block` to the bern2 API and returns a json of labled biomedical terms from `text_block` with thier indecies.'''
    return requests.post(url, json={'text': text}).json()

# if __name__ == '__main__':
#     text = "Autophagy maintains tumour growth through circulating arginine"
#     print(query_plain(text))
